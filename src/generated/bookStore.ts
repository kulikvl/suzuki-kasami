// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v3.19.1
// source: bookStore.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "bookStorePackage";

/** Our BookItem message definition. */
export interface BookItem {
  id: number;
  book: string;
}

/** Our BookRequest message definition. */
export interface BookRequest {
  id: number;
}

/** Our BooksList message definition. This will be an array of BookItem. */
export interface BooksList {
  books: BookItem[];
}

/** the method `readBooks` does not accept any parameter so we have to specify that it is empty. */
export interface Empty {
}

function createBaseBookItem(): BookItem {
  return { id: 0, book: "" };
}

export const BookItem: MessageFns<BookItem> = {
  encode(message: BookItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.book !== "") {
      writer.uint32(18).string(message.book);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.book = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      book: isSet(object.book) ? globalThis.String(object.book) : "",
    };
  },

  toJSON(message: BookItem): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.book !== "") {
      obj.book = message.book;
    }
    return obj;
  },

  create(base?: DeepPartial<BookItem>): BookItem {
    return BookItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BookItem>): BookItem {
    const message = createBaseBookItem();
    message.id = object.id ?? 0;
    message.book = object.book ?? "";
    return message;
  },
};

function createBaseBookRequest(): BookRequest {
  return { id: 0 };
}

export const BookRequest: MessageFns<BookRequest> = {
  encode(message: BookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: BookRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<BookRequest>): BookRequest {
    return BookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BookRequest>): BookRequest {
    const message = createBaseBookRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseBooksList(): BooksList {
  return { books: [] };
}

export const BooksList: MessageFns<BooksList> = {
  encode(message: BooksList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.books) {
      BookItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BooksList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBooksList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.books.push(BookItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BooksList {
    return { books: globalThis.Array.isArray(object?.books) ? object.books.map((e: any) => BookItem.fromJSON(e)) : [] };
  },

  toJSON(message: BooksList): unknown {
    const obj: any = {};
    if (message.books?.length) {
      obj.books = message.books.map((e) => BookItem.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BooksList>): BooksList {
    return BooksList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BooksList>): BooksList {
    const message = createBaseBooksList();
    message.books = object.books?.map((e) => BookItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Empty>): Empty {
    return Empty.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Empty>): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

/** Our Book service definition. */
export type BookDefinition = typeof BookDefinition;
export const BookDefinition = {
  name: "Book",
  fullName: "bookStorePackage.Book",
  methods: {
    createBook: {
      name: "createBook",
      requestType: BookItem,
      requestStream: false,
      responseType: BookItem,
      responseStream: false,
      options: {},
    },
    readBook: {
      name: "readBook",
      requestType: BookRequest,
      requestStream: false,
      responseType: BookItem,
      responseStream: false,
      options: {},
    },
    readBooks: {
      name: "readBooks",
      requestType: Empty,
      requestStream: false,
      responseType: BooksList,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface BookServiceImplementation<CallContextExt = {}> {
  createBook(request: BookItem, context: CallContext & CallContextExt): Promise<DeepPartial<BookItem>>;
  readBook(request: BookRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BookItem>>;
  readBooks(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<BooksList>>;
}

export interface BookClient<CallOptionsExt = {}> {
  createBook(request: DeepPartial<BookItem>, options?: CallOptions & CallOptionsExt): Promise<BookItem>;
  readBook(request: DeepPartial<BookRequest>, options?: CallOptions & CallOptionsExt): Promise<BookItem>;
  readBooks(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<BooksList>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
